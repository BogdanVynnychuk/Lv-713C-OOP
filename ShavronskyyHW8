using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Random rnd = new Random();
            List<Shape> shapes = new List<Shape>();
            string largestShapeName = string.Empty;
            double largestPerimeter = 0;
            for(int i = 0; i < 6; i++)
            {
                shapes.Add(new Square(rnd.Next(1, 10), $"Square number {i}"));
                shapes.Add(new Circle(rnd.Next(1, 10), $"Circle number {i}"));
            }
            foreach(Shape shape in shapes)
            {
                Console.WriteLine("---------------");
                Console.WriteLine(shape.Name);
                Console.WriteLine("area is, {0}, perimeter is: {1}", shape.Area(), shape.Perimeter());
                Console.WriteLine("---------------");
            }
            foreach(var shape in shapes)
            {
                if(shape.Perimeter() > largestPerimeter)
                {
                    largestPerimeter = shape.Perimeter();
                    largestShapeName = shape.Name;
                    shape.CompareTo(shape);
                }
            }
            Console.WriteLine("{0} has a largest perimeter: {1}", largestShapeName, largestPerimeter);
            Console.WriteLine("Sorted");
            shapes.Sort();
            foreach(var shape in shapes)// чесно кажучи не дуже зрозумів IComparable(зовсім не зрозумів, пробував вивчити, запитаю на лекції або зависну в гуглі)
            {
                Console.WriteLine("Shape's name: {0}, shape's perimeter: {1}, shapes area: {2}", shape.Name, shape.Perimeter(), shape.Area());
            }
        }
    }
    abstract class Shape : IComparable<Shape>
    {
        private string name;

        public string Name
        {
            get { return this.name; }
            set { this.name = value; }
        }
        public Shape(string name)
        {
            this.name = name;
        }
        public abstract double Area();

        public abstract double Perimeter();

        public int CompareTo(Shape other)
        {
            if (this.Area() < other.Area()) return 1;
            else if (this.Area() > other.Area()) return -1;
            else return 0;
        }
    }
    class Circle : Shape
    {
        private double radius;
        public double Radius
        {
            get { return radius; }
            set { radius = value; }
        }
        public Circle(double radius, string name) : base(name)
        {
            this.radius = radius;
        }
        public override double Area()
        {
            return Math.PI * Math.Pow(this.radius,2);
        }

        public override double Perimeter()
        {
            return (2 * Math.PI) * this.radius;
        }
    }
    class Square : Shape
    {
        private double side;
        public double Side
        {
            get { return side; }
            set { side = value; }
        }
        public Square(double side, string name) : base(name)
        {
            this.side = side;
        }
        public override double Area()
        {
            return Math.Pow(this.side,2);
        }

        public override double Perimeter()
        {
            return 4 * this.side; //4 - side
        }
    }
}
