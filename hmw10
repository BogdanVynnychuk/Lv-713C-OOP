using System;
using System.Collections.Generic;

namespace _10a
{
    public class _0a2
    {
        static void Main(string[] args)
        {
        List<Triangle> triangles = new List<Triangle>();

        Point point1 = new Point(1, 9);
        Point point2 = new Point(2, 8);
        Point point3 = new Point(3, 7);
        Point point4 = new Point(4, 6);
        Point point5 = new Point(5, 5);
        Point point6 = new Point(6, 4);
        Point point7 = new Point(7, 3);
        Point point8 = new Point(8, 2);
        Point point9 = new Point(9, 1);
        Point zeropoint = new Point(0, 0);

        Triangle triangle1 = new Triangle(point1, point2, point3);
        Triangle triangle2 = new Triangle(point3, point4, point6);
        Triangle triangle3 = new Triangle(point7, point8, point9);

        triangles.Add(triangle1);
        triangles.Add(triangle2);
        triangles.Add(triangle3);

        foreach (Triangle triangle in triangles)
        {
            triangle.Print();
        }
            Console.ReadLine();
        }
    }
}


using System;
using System.Collections.Generic;
using System.Text;
using _10a;


namespace _10a
{
    public struct Point
    {
        public int X, Y;
        public Point(int x, int y)
        {
            this.X = x;
            this.Y = y;
        }
        public override string ToString()
        {
            return $"Point - x :  {X} Point - y : {Y}";
        }

    }
   

    public class Triangle
    {
        public Point Vertex1, Vertex2, Vertex3;

        public Triangle(Point a, Point b, Point c)

        {
            this.Vertex1 = a;
            this.Vertex2 = b;
            this.Vertex3 = c;
        }
       

        public double Distance(Point point1, Point point2)
        {
            double result_d = Math.Sqrt(Math.Pow((point2.X - point1.X), 2) +
                Math.Pow((point2.Y - point1.Y), 2));
            return Math.Round(result_d, 3);

        }

        public double Perimetr()
        {
            double result_p = Math.Round(Distance(Vertex1, Vertex2) +
                Distance(Vertex3, Vertex1) + Distance(Vertex2, Vertex3), 2);
            return result_p;

        }

        public double Square()
        {
            double result_s = Math.Round(Math.Sqrt(Perimetr() * (Perimetr() - Distance(Vertex1, Vertex2)) *
            (Perimetr() - Distance(Vertex2, Vertex3)) *
            (Perimetr() - Distance(Vertex3, Vertex1))), 2);
            return result_s;
        }


        public void Print()
        {
            Console.WriteLine($"Tringle sides {Distance(Vertex1,Vertex2)}, :::" +
                $" {Distance(Vertex2, Vertex3)}, {Distance(Vertex3, Vertex1)} " +
                $"Perimeter {Perimetr()}, Square {Square()}" ) ;

        }

    }
}




using Microsoft.VisualStudio.TestTools.UnitTesting;
using _10a;


[TestClass]
public class Test
{
    [TestMethod]
    public void Distance_p1p2_return2()
    {
        Point point1 = new Point(0, 0);
        Point point2 = new Point(0, 2);
        Point point3 = new Point(1, 0);
        double expected = 2;

        Triangle triangleTest = new Triangle(point1, point2, point3);
        double actual = triangleTest.Distance(point1, point2);

        Assert.AreEqual(expected, actual);
    }

    [TestMethod]
    public void Perimetr_p1p2p3_return3()
    {
        Point point1 = new Point(0, 0);
        Point point2 = new Point(0, 3);
        Point point3 = new Point(1, 0);
        double expected = 3;

        Triangle triangleTest = new Triangle(point1, point2, point3);
        double actual = triangleTest.Perimetr();

        Assert.AreEqual(expected, actual);
    }

    [TestMethod]
    public void Square_p1p2p33_return122_743()
    {
        Point point1 = new Point(2, 7);
        Point point2 = new Point(1, 3);
        Point point3 = new Point(7, 273);
        double expected = 122.743;

        Triangle triangleTest = new Triangle(point1, point2, point3);
        double actual = triangleTest.Square();

        Assert.AreEqual(expected, actual);
    }
}


