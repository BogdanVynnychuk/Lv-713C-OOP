using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;

namespace Hrynchyshyn HW_10
{
    public struct Point
        {
        public int X;
        public int Y;

        public Point(int x, int y)
        {
            this.X = x;
            this.Y = y;
        }

        public override string ToString()
        {
            return "(" +X+ "," +Y+ ")";
        }

    }
   
  
  internal class Program
   
   {
        static void Main(string[] args)
        {
            List<Triangle> triangles = new List<Triangle>()
            { 
            new Triangle(new Point(0,3), new Point(4,2), new Point(10,10)),
            new Triangle(new Point(0,2), new Point(5,2), new Point(11,11)),
            new Triangle(new Point(0,1), new Point(6,2), new Point(12,12))
            };
            foreach (Triangle triangle in triangles) triangle.Print();

            Console.WriteLine("Triangle with vertex which is the closest to origin (0,0):");
            Triangle triangleWithMinDistance = triangles[0];
            foreach (Triangle triangle in triangles)
                if (triangleWithMinDistance.minDistance() > triangle.minDistance()) triangleWithMinDistance = triangle;
            triangleWithMinDistance.Print();
        }
    }
}
public class Triangle
    {
        public Point Vertex1, Vertex2, Vertex3;
        public Triangle(Point a, Point b, Point c)
        {
            Vertex1 = a;
            Vertex2 = b; 
            Vertex3 = c;
        }
        public static double Distance(Point firstPoint,Point secondPoint)
        {
            double result = Math.Sqrt(Math.Pow((secondPoint.X - firstPoint.X), 2) + Math.Pow((secondPoint.Y - firstPoint.Y), 2));
            return Math.Round(result,3);
        }

        public static double Perimeter(Triangle triangle)
        {
            double ab = Triangle.Distance(triangle.Vertex1, triangle.Vertex2);
            double cb = Triangle.Distance(triangle.Vertex3, triangle.Vertex2);
            double ac = Triangle.Distance(triangle.Vertex1, triangle.Vertex3);

            return Math.Round(ab + cb + ac,3);
        }
        public static double Square(Triangle triangle) // Heron's formula
        {
            double ab = Triangle.Distance(triangle.Vertex1, triangle.Vertex2);
            double cb = Triangle.Distance(triangle.Vertex3, triangle.Vertex2);
            double ac = Triangle.Distance(triangle.Vertex1, triangle.Vertex3);
            double halfPerimeter = Triangle.Perimeter(triangle) /2;
            double result = Math.Sqrt((halfPerimeter) * (halfPerimeter - ab)*(halfPerimeter - cb)*(halfPerimeter - ac));
            return Math.Round(result, 3);
        }
        public static void Print(Triangle triangle)
        {
            Console.WriteLine("--");
            Console.WriteLine($"Traingle:\nPerimeter is: {Triangle.Perimeter(triangle)}\nSquare is: {Triangle.Square(triangle)} ");
            Console.WriteLine("--");
        }
    }
}
